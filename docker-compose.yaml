version: "3.9"
services:
  backend:
   restart: unless-stopped
   build:
      dockerfile: ./deployments/Dockerfile
   working_dir: /internal/person
   env_file:
      - .env
   ports:
      - "8080:8080"
      - "8081:8081"
   links:
      - postgres
      - redis
      - kafka
   depends_on:
      - postgres
      - redis
      - kafka

  postgres:
    image: "postgres:15-alpine"
    restart: unless-stopped
    ports:
      - "5432:5432"
    env_file:
      - .env
    volumes:
      - pgdata-persons:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  migrate:
    image: migrate/migrate
    env_file:
      - .env
    volumes:
      - ./migrations:/migrations
    command: [
      "-path",
      "./migrations",
      "-database",
      "${POSTGRES_URL}?sslmode=disable", "up"
      ]
    links:
      - postgres
    depends_on:
      postgres:
        condition: service_healthy

  redis:
    image: redis:7.2.1-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 30 1 --loglevel warning
    volumes:
      - cache:/data

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
    - "2181:2181"

  kafka:
    container_name: kafka
    image: wurstmeister/kafka:2.12-2.2.1
    environment:
      KAFKA_CREATE_TOPICS: "${KAFKA_READ_TOPIC}:1:1,${KAFKA_ERROR_TOPIC}:1:1"

      KAFKA_ADVERTISED_LISTENERS: >-
        LISTENER_DOCKER_INTERNAL://kafka:19092,
        LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092

      KAFKA_LISTENERS: >-
        LISTENER_DOCKER_INTERNAL://:19092,
        LISTENER_DOCKER_EXTERNAL://:9092

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: >-
        LISTENER_DOCKER_INTERNAL:PLAINTEXT,
        LISTENER_DOCKER_EXTERNAL:PLAINTEXT

      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_LOGGERS: >-
        kafka.controller=INFO,
        kafka.producer.async.DefaultEventHandler=INFO,
        state.change.logger=INFO
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
    pgdata-persons:
    cache: